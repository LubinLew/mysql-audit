/*  Copyright (C) 2024 LubinLew
    SPDX short identifier: MIT

Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the “Software”), to deal in 
the Software without restriction, including without limitation the rights to use, 
copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
OTHER DEALINGS IN THE SOFTWARE. */


#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include <memory>

#include <gnutls/abstract.h>
#include <gnutls/pkcs12.h>

#include <audit_debug.hpp>

#include "tls_internal.hpp"

/*****************************************************************************/

static gnutls_privkey_t g_private_key = nullptr;

/*****************************************************************************/

bool tls_key_init(std::string& private_key_path, std::string& private_key_pass)
{
    gnutls_x509_privkey_t x509_priv_key;
    gnutls_datum_t        key;
    struct stat           statbuf;
    uint8_t               ret;
    FILE*                 fp = nullptr;
    const char*           key_path = private_key_path.c_str();

    fp = fopen(key_path, "rb");
    if (!fp) {
        audit_debug_err("fopen(%s) failed: %s", key_path, strerror(errno));
        return false;
    }

    if (stat(key_path, &statbuf) == -1) {
        audit_debug_err("stat(%s) faiiled: %s", key_path, strerror(errno));
        return false;
    }

    /* load all file contents into a datum buffer*/
    std::unique_ptr<uint8_t[]>key_buff = std::make_unique<uint8_t[]>(statbuf.st_size);
    uint8_t* buffer = key_buff.get();
    key.data = buffer;
    key.size = (int)statbuf.st_size;
    fread(key.data, 1, key.size, fp);
    fclose(fp);

    /* init private key data*/
    gnutls_x509_privkey_init(&x509_priv_key);

    /* import PEM data*/
    if (private_key_pass.empty()) {
        ret = gnutls_x509_privkey_import(x509_priv_key, &key, GNUTLS_X509_FMT_PEM);
    } else {
        ret = gnutls_x509_privkey_import_pkcs8(x509_priv_key, &key, GNUTLS_X509_FMT_PEM, private_key_pass.c_str(), 0);
    }

    if(ret != GNUTLS_E_SUCCESS) {
        audit_debug_err("can't import pem data: %s", gnutls_strerror(ret));
        gnutls_x509_privkey_deinit(x509_priv_key);
        return false;
    }

    if (gnutls_x509_privkey_get_pk_algorithm(x509_priv_key) != GNUTLS_PK_RSA) {
        audit_debug_err("private key public key algorithm isn't RSA");
        gnutls_x509_privkey_deinit(x509_priv_key);
        return false;
    }

    gnutls_privkey_init(&g_private_key);
    ret = gnutls_privkey_import_x509(g_private_key, x509_priv_key, GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE|GNUTLS_PRIVKEY_IMPORT_COPY);
    gnutls_x509_privkey_deinit(x509_priv_key);
    if (ret < 0) {
        audit_debug_err("Error importing private key %s: %s", key_path, gnutls_strerror(ret));
        gnutls_privkey_deinit(g_private_key);
        g_private_key = nullptr;
        return false;
    }

    return true;
}

void tls_key_free(void)
{
    if (g_private_key) {
        gnutls_privkey_deinit(g_private_key);
    }
}

/*
When RSA is used for server authentication and key exchange, 
a 48-byte pre_master_secret is generated by the client, 
encrypted under the server's public key, and sent to the server.  
The server uses its private key to decrypt the pre_master_secret.  
Both parties then convert the pre_master_secret into the master_secret.
*/
bool tls_decrypt_with_private_key(tls_bytes_t& enc, tls_bytes_t& dec)
{
    gnutls_datum_t ciphertext { enc.data(), (unsigned int)enc.size() };
    gnutls_datum_t plaintext  { nullptr, 0 };

    audit_debug_byte_array(enc, "encrypted-premaster");

    int ret = gnutls_privkey_decrypt_data(g_private_key, 0, &ciphertext, &plaintext);
    if (ret == 0) {
        if (plaintext.size != 48) {
            gnutls_free(plaintext.data);
            audit_debug_err("Invalid premaster found, length should be 48");
            return false;
        }
        dec.assign(plaintext.data, plaintext.data + plaintext.size);
        gnutls_free(plaintext.data);
    } else {
        audit_debug_err("gnutls_privkey_decrypt_data() failed");
        return false;
    }

    audit_debug_byte_array(dec, "decrypted-premaster");
    return true;
}

